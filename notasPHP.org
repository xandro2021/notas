#+title: Notas Php


* Iniciar servidor de desarrollo
#+begin_src bash
php -S localhost:3000
#+end_src

* Imprimir Consola
#+begin_src php
print "texto";
echo "texto";
var_dump("variable");
#+end_src

* Incluir archivos
** Include
Estoy agregando el archivo de header y footer al archivo de php actual
#+begin_src php
<?php include "includes/header.php";
echo "Mi codigo de archivo actual"
include "includes/footer.php";
#+end_src

* Variables
#+begin_src php
$saludo = "hola";
#+end_src

* Constantes
#+begin_src php
define("MICONSTANTE", "Este es el valor de la constante");
const constantePI = 3.14;
#+end_src

* Tipos de datos
** Boleanos
#+begin_src php
$logueado = true;
var_dump($logueado);
#+end_src
** Enteros
#+begin_src php
$numero = 300;
var_dump($numero);
#+end_src

** Floats
#+begin_src php
$float = 300.23;
var_dump($float);
#+end_src

** Strings
#+begin_src php
$nombre = "Juan";
var_dump($nombre);
#+end_src
** Arreglos
#+begin_src php
$array = [];
var_dump($array);
#+end_src

* Operadores aritmeticos y Comparacion
Igual a los de Javascript con excepcion a <=>
El resultado de var_dump va a ser -1 si el de la izquierda es menor, cero si son iguales, y 1 si izquierda es mayor
#+begin_src php
var_dump($numero1 <=> $numero2);
#+end_src

* Incremento y decrementos
Es igual a los de javascript

* Funciones Predefinidas de PHP
#+begin_src php
$nombreCliente = "Marco";
strlen($nombreCliente);
trim($nombreCliente);
strtoupper($nombreCliente);
strtolower($nombreCliente);
str_replace("Juan", "J", $nombreCliente);
strpos($nombreCliente, "Juan");
#+end_src

* Concatenar
String + Variable
#+begin_src php
$nombreCliente = "Ronaldo";
$tipoCliente = "Premium";
echo "El Cliente ".$nombreCliente." es ".$tipoCliente;
echo "El Cliente {$nombreCliente} es {$tipoCliente}";
#+end_src

* Arreglos
** Crear Arreglo
#+begin_src php
$carrito = ["Tablet", "Television", "Computadora"];
$clientes = array("Cliente 1", "Cliente 2", "Cliente 3");
#+end_src
** Leer todos los elementos del arreglo
#+begin_src php
echo "<pre>";
var_dump($carrito);
echo "<pre>";
#+end_src
** Leer elemento del arreglo
#+begin_src php
var_dump($carrito[1]);
#+end_src
** Agregar/Actualizar elemento al arreglo con Indice
+ Como en JS si existe lo actualiza, sino lo agrega
#+begin_src php
$carrito[3] = "Nuevo Producto";
#+end_src
** Agregar elementos
*** Al Final
#+begin_src php
array_push($carrito, "Audifonos");
#+end_src
*** Al Inicio
#+begin_src php
array_unshift($carrito, "Smart Watch");
#+end_src

* Arreglo Asociativo
#+begin_src php
$cliente = [
    "nombre" => "Juan",
    "saldo" => 200,
    "informacion" => [
        "tipo" => "premium"
    ]
];

echo $cliente["nombre"];
echo $cliente["informacion"]["tipo"];
#+end_src

* Funciones predifinidas arreglos
** Empty
Si el arreglo tiene informacion
#+begin_src php
$clientes = array();
empty($clientes);
#+end_src
** Isset
Si el arreglo existe o una propiedad esta definida en un arreglo asociativo
#+begin_src php
$cliente = [
    "nombre" => "Marco",
    "edad" => 30
];

echo "<pre>";
var_dump(isset($cliente));
var_dump(isset($cliente["nombre"]));
echo "<pre>";
#+end_src

* Array Methods
** Contiene elemento
#+begin_src php
$carrito = ["Tablet", "Computadora", "Television"];
in_array("Tablet", $carrito);
#+end_src
** Ordenar arreglos
+ sort -> ordena de menor a mayor
+ rsort -> de mayor a menor
#+begin_src php
$numeros = array(5,2,56,1,6,22,1,13,54,6,3,2);
sort($numeros);
rsort($numeros);
#+end_src
** Ordenar arreglos asociativos
+ Las variantes con r se debe a reverse
*** Values
#+begin_src php
$cliente = array (
    "saldo" => 100,
    "tipo" => "premium",
    "nombre" => "Juan"
);

asort($cliente);
arsort($cliente);
#+end_src
*** Keys
#+begin_src php
ksort($cliente);
krsort($cliente);
#+end_src

* Condicionales
** Operadores Boleanos
Funcionan igual que en Javascript || y &&
** If-else
Funciona igual que en Javascript
#+begin_src php
$cliente = array (
    "saldo" => 100,
    "nombre" => "Juan",
    "informacion" => [
        "tipo" => "premium"
    ]
);

if (!empty($cliente)) {
    echo "El cliente existe <br>";

    if($cliente["saldo"] > 0) {
        echo "tiene saldo";
    }
    else if($cliente["informacion"]["tipo"] === "premium") {
        echo "El cliente es Premium";
    }
    else {
        echo "Estas pobre";
    }
}
#+end_src
** Switch
#+begin_src php
$technologia = "Javascript";

switch($technologia) {
    case "PHP" :
        echo "PHP, el lenguaje de la web";
        break;
    case "Javascript" :
        echo "Javascript, el lenguaje del front end";
        break;
    default:
        echo "Lenguaje desconocido";
}
#+end_src

* Loops
Los loops son iguales a los de javascript (while, do-while, for)
** for
#+begin_src php
$clientes = ["Pedro", "Juan", "Karen"];

for($i = 0; $i < count($clientes); $i++) {
    echo $clientes[$i] . "<br>";
}
#+end_src
** foreach
*** Arreglo sencillo
#+begin_src php
$clientes = ["Pedro", "Juan", "Karen"];

foreach($clientes as $cliente) {
    echo $cliente."<br>";
}
#+end_src
*** Arreglo asociativo
**** values
#+begin_src php
$cliente = [
    "nombre" => "Juan",
    "saldo" => 200,
    "tipo" => "premium"
];

foreach($cliente as $valor) {
    echo $valor."<br>";
}
#+end_src
**** keys
#+begin_src php
$cliente = [
    "nombre" => "Juan",
    "saldo" => 200,
    "tipo" => "premium"
];

foreach($cliente as $key => $valor) {
    echo "[key: {$key}, value: {$valor}] <br>";
}
#+end_src

* Ejemplo Basico
#+begin_src php
$productos = [
    [
        "nombre" => "Tablet",
        "precio" => 200,
        "disponible" => true
    ],
    [
        "nombre" => "Television 24\"",
        "precio" => 300,
        "disponible" => true
    ],
    [
        "nombre" => "Monitor Curvo",
        "precio" => 400,
        "disponible" => false
    ],
];

foreach ($productos as $producto) { ?>

    <li>
        <p> Producto: <?php  echo $producto["nombre"] ?> </p>
        <p> Precio: <?php  echo "$". $producto["precio"] ?> </p>
        <p><?php  echo ($producto["disponible"]) ? "Diponible": "Sin Stock"; ?> </p>
    </li>

    <?php
}


include "includes/footer.php";
#+end_src

* Funciones
** Sin retorno
+ Se puede especificar el tipo de dato
+ Se pueden asignar valores por default
#+begin_src php
function sumar(int $numero1 = 0, int $numero2 = 0) {
    echo $numero1 + $numero2;
}

sumar(1,6);
#+end_src
** Con retorno
#+begin_src php
function usuarioAutenticado() : string {
    return "El usuario esta autenticado";
}

echo usuarioAutenticado();
#+end_src
** Con retorno opcional
La funcion puede o no regresar un valor. Perfecto para las situaciones donde haya un retorno de null
#+begin_src php
function usuarioAutenticado(bool $autenticado) : ?string {
    if ($autenticado) {
        return "El usuario esta autenticado";
    }
    else {
        return null;
    }
}

echo usuarioAutenticado(true);
#+end_src
** Con diferentes tipos retorno (PHP8)
La funcion devuelve un string o un entero
#+begin_src php
function usuarioAutenticado(bool $autenticado) : string | int {
    if ($autenticado) {
        return "El usuario esta autenticado";
    }
    else {
        return 20;
    }
}

echo usuarioAutenticado(true);
#+end_src
** Parametros nombrado (PHP8)
Puedo especificar a cual argumento va a corresponder cada parametro
#+begin_src php
function sumar(int $num1, int $num2) {
    echo "segundo parametro: {$num2}<br>";
    echo "resultado: ".($num1+$num2);
}

sumar(num2: 1, num1: 3);
#+end_src

* AÃ±adir archivos a otros archivos
** Include
+ La instruccion include sirve para inyectar en el documento actual codigo que se va a repetir en otros documentos
+ En el ejemplo estoy inyectando un header y un footer de html provenientes de otro archivo php para que asi el contenido actual tenga el mismo header-footer y estilos que otros documentos
+ Si el archivo que marca la ruta no existe, puede que el resto del codigo se ejecute dependiendo de la configuracion
+ RECOMENDACION: Usar solo con templates
#+begin_src php
<?php
declare(strict_types=1);
include "includes/header.php";

function sumar(int $num1, int $num2) {
    echo "segundo parametro: {$num2}<br>";
    echo "resultado: ".($num1+$num2);
}

sumar(num2: 1, num1: 3);

include "includes/footer.php";
#+end_src

** Require
+ Hace lo mismo que include con la diferencia de que si el archivo especificado en la ruta no existe, entonces el programa crashea con Error 500: Internal Server Error
+ RECOMENDACION: Usar solo cuando hay funciones criticas para la correcta ejecucion de la aplicacion, como por ejemplo: Conexiones a bases de datos. REUTILIZACION DE FUNCIONES

** Require Once
+ Lo mismo que require, pero con la diferencia de que garantiza que el archivo solo se incluya una unica vez
#+begin_src php
require_once "includes/header.php";
#+end_src

* JSON en PHP
** Convertir a JSON
#+begin_src php
$productos = [
    [
        "nombre" => "Tablet",
        "precio" => 200,
        "disponible" => true
    ],
    [
        "nombre" => "Television 24\"",
        "precio" => 300,
        "disponible" => true
    ],
    [
        "nombre" => "Monitor Curvo",
        "precio" => 400,
        "disponible" => false,
    ],
];

$productosjson = json_encode($productos, JSON_UNESCAPED_UNICODE);
#+end_src
** Convertir de JSON a Obj
#+begin_src php
$productosObj = json_decode($productosjson);
#+end_src

* Conexion DB
** MySQL
*** Conectarse a la DB
database.php
#+begin_src php
$db = myqsqli_connect("localhost", "usuario", "password", "nombreDB");

if(!$db) {
  echo "hubo un error";
  exit;
}
#+end_src
*** Extraer datos de la DB
Cerrar la conexion en PHP es opcional dado que el mismo lenguaje lo hace automaticamente una vez llega al final del bloque de codigo de la consulta
funciones.php
#+begin_src php
function obtener_servicios() {
    try {
        // Importar credenciales (Codigo de conexion a la DB)
        require "database.php"
        // Consulta SQL
        $sql = "SELECT * FROM  servicios;";
        // Ejecutar la consulta
        $consulta = mysqli_query($db, $sql);
        // Acceder a los resultados
        $resultados = mysqli_fetch_assoc($consulta); // Solo trae el primer dato
        $resultados = mysqli_fetch_all($consulta); // trae todos los datos de la consulta, pero se recomienda mejor assoc y meterlo dentro de un ciclo
        // Cerrar conexion
        mysqli_close($db);

        return $consulta;
    }
    catch(Throwable $e) {
        var_dump($e);
    }
}
#+end_src
*** Mostrar los datos extraidos
La constante DIR contiene la ubicacion de la carpeta del proyecto
index.php
#+begin_src php
<? php
    require __DIR__ . "/includes/funciones.php";
    require "./includes/funciones.php";
    $consulta = obtener_servicios();
?>

<? php
    while($servicio = mysqli_fetch_assoc($consulta)) { ?>

        <div class="servicio">
            <p class="nombre-servicio"><?php echo $servicio["nombre"] ?></p>
            <p class="precio-servicio"><?php echo $servicio["precio"] ?></p>
            <p><?php echo $servicio["id"] ?></p>
        </div>

<?php } ?>
#+end_src
